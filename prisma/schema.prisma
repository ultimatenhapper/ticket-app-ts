// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Ticket {
  id               Int      @id @default(autoincrement())
  title            String   @db.VarChar(255)
  description      String   @db.Text
  status           Status   @default(OPEN)
  priority         Priority @default(MEDIUM)
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  assignedToUser   User?    @relation(fields: [assignedToUserId], references: [id])
  assignedToUserId String?
  projectId        Int?
  project          Project? @relation(fields: [projectId], references: [id])

  TTS              Int  @default(0)
  // timeLogs         TimeLog[]
}

enum Status {
  OPEN
  STARTED
  CLOSED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

// model TimeLog {
//   id         Int       @id @default(autoincrement())
//   ticketId   Int
//   ticket     Ticket    @relation(fields: [ticketId], references: [id])
//   startTime  DateTime
//   endTime    DateTime
//   duration   Decimal   // Store duration in hours or minutes as needed

//   createdAt  DateTime  @default(now())
//   updatedAt  DateTime  @updatedAt

//   // Additional fields and indexes if necessary
// }

model User {
  id            String    @id @default(uuid())
  name          String?
  roles         Role      @default(USER)
  password      String?
  isActive      Boolean   @default(true)
  email         String    @unique
  emailVerified DateTime?
  image         String?

  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  tickets       Ticket[]

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?   @db.Text
  access_token      String?   @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?   @db.Text
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

enum Role {
  ADMIN
  TECH
  USER
}

model Project {
  id          Int           @id @default(autoincrement())
  name        String
  description String        @db.Text
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  tickets     Ticket[]
  users       User[]
}

// model ProjectUser {
//   projectId Int
//   userId    String

//   project Project @relation(fields: [projectId], references: [id])
//   user    User    @relation(fields: [userId], references: [id])

//   @@id([projectId, userId])
// }
